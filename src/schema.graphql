enum CubeType {
    Classic
    Powered
    Interactive
}

enum PrizeType {
    QP
    Ranked
    Special
}

enum OCLAccount {
    OCL_Sower
    OCL1_Balance
    OCL2_Opposition
    OCL3_Duress
    OCL4_Fireblast
    OCL5_Rancor
    OCL6_Vindicate
    OCL7_Skullclamp
    OCL8_Wasteland
}

type Player {
    id: ID!
    fullName: String
    discordHandle: String
    discordIdExt: String
    timeZone: String
    email: String
    eventEntries(howMany: Int, after: String, asc: Boolean): [Entry]
    standing(season: String): Standing
    pairingsVs(oppId: String!, howMany: Int, after: String, asc: Boolean): [Pairing]
    # favoriteCards(howMany: Int, after: String): [Card]
    openPairings: [Pairing]
    openEntries: [Entry]
}
type Standing {
    playerId: ID!
    season: String!
    player: Player
    qps: Int
    matchWins: Int
    matchLosses: Int
    allTimeRank: Int
    rank: Int
    trophies: Int
}
type OCLEvent {
    id: ID!
    prizeType: PrizeType
    cubeId: String
    cube: Cube
    season: String
    completedDate: String
    draftDate: String
    playerEntries(byFinish: Boolean): [Entry]
    pairings(roundNum: Int): [Pairing]
    winningEntry: Entry
}
type Entry {
    playerId: ID!
    eventId: ID!
    player: Player
    event: OCLEvent
    seatNum: Int!
    finalPosition: Int
    qpsAwarded: Int
    cpsAwarded: Int 
    account: OCLAccount
    isOpen: Boolean
    pairings: [Pairing]
    deck: Deck
    matchWins: Int
    matchLosses: Int
}
type Pairing {
    eventId: ID!
    roundNum: Int!
    tableNum: Int!
    p1Id: ID
    p2Id: ID
    p1Entry: Entry
    p2Entry: Entry
    p1GameWins: Int
    p2GameWins: Int
    p1MatchWin: Boolean
    p2MatchWin: Boolean
    asPlayerId: ID
    asPlayerEntry: Entry
    opponentId: ID
    opponentEntry: Entry
    asPlayerGameWins: Int
    asPlayerMatchWin: Boolean
    opponentGameWins: Int
    opponentMatchWin: Boolean
    choosePlayDrawId: ID
    winnerId: ID
    loserId: ID
    winnerEntry: Entry
    loserEntry: Entry
}
type Pick {
    playerId: ID!
    eventId: ID!
    pickId: Int!
    entry: Entry
    packNum: Int
    pickNum: Int
    cardName: String
    card: Card
    otherCardNamesString: String
    otherCardNames: [String]
    otherCards: [Card]
    isMain: Int
    poolAsOfNames: [String]
    poolAsOf: [Card]
}
type Deck {
    pool: [Pick]
    main: [Pick]
    sideboard: [Pick]
    # ownedDekFile(stylePref: String): String
}
type MTGOCard {
    id: Int!
    name: String
    mtgoName: String    
    numOwned: Int
    numWishlist: Int
#    styleClass: String
#    isFoil: Boolean
    dekRow(howMany: Int, isSideboard: Boolean): String
#    numAtAccount(oclAccount: String): Int
    card: Card
}
type Card {
    name: String!
    avgPickOrder(cubeTypes: [CubeType]): Float
#     pickIndex: Float
#     powerIndex: Float
    mainDeckPct(cubeTypes: [CubeType]): Float
    wheelPct(cubeTypes: [CubeType]): Float
    inEventPoolCount(cubeTypes: [CubeType]): Int 
    matchWinsInPool(cubeTypes: [CubeType]): Int
    matchLossesInPool(cubeTypes: [CubeType]): Int
    bayesianWinRate(cubeTypes: [CubeType], vol: Float): Float
    cubesIn: [Cube]    
    recentEntries(howMany: Int): [Entry]
#     ownedMTGOCard(stylePref: String): MTGOCard
}

type Cube {
    id: ID!
    cubeType: CubeType
    activeDate: String
    inactiveDate: String
    listString: String
    cardNames: [String]
    cards: [Card]
    recentEvents: [OCLEvent]
    allCubesOfType: [Cube]
    # ownedMTGOCards: [MTGOCard]
    # ownedDekExport: String
}

type Query {
    player(id: ID!): Player
    players(howMany: Int, after: String, by: String, asc: Boolean): [Player]
    playerSearch(byName: String, byHandle: String): [Player]
    event(id: ID!): OCLEvent
    events(howMany: Int, after: String, asc: Boolean, season: String): [OCLEvent]
    entry(playerId: ID!, eventId: ID!): Entry
    standings(season: String, howMany: Int, after: Int): [Standing]
    card(name: String): Card
    cubeByType(cubeType: CubeType): Cube
} 